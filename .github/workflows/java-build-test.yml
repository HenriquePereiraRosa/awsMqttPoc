# Java Build and Test Workflow
# This workflow:
# 1. Detects changes in any module (order-service, common, infrastructure)
# 2. Builds only the changed modules and their dependencies
# 3. Runs tests for changed modules on PRs (open and updates)

name: Java Build and Test

# Trigger only on Pull Requests
on:
  pull_request:
    types:
      - opened      # When PR is first opened
      - synchronize # When new commits are pushed to PR
      - reopened    # When PR is reopened
    branches:
      - main
      - 'release/**'  # Git-flow pattern: release/v1.0.0, release/2.0.0, etc.

# Environment variables for the workflow
env:
  JAVA_VERSION: '21'
  MAVEN_VERSION: '3.9.5'

jobs:
  # Step 1: Detect which modules have changed
  detect-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    # Outputs which modules have changed
    outputs:
      order-service: ${{ steps.filter.outputs.order-service }}
      common: ${{ steps.filter.outputs.common }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      has-changes: ${{ steps.filter.outputs.changes != '[]' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for merge-base comparison
      
      - name: Detect changed modules
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # For PR events, paths-filter automatically compares PR head vs base branch
          # No need to specify 'base' or 'ref' - they're ignored for PR events anyway
          # List of filters - one per module
          filters: |
            order-service:
              - 'apis/order-service/**'
              - 'apis/order-service/order-domain/**'
              - 'apis/order-service/order-application/**'
              - 'apis/order-service/order-dataaccess/**'
              - 'apis/order-service/order-messaging/**'
              - 'apis/order-service/order-container/**'
              - 'apis/pom.xml'
            common:
              - 'apis/common/**'
              - 'apis/common/common-domain/**'
              - 'apis/common/common-infra/**'
              - 'apis/common/test-utils/**'
              - 'apis/pom.xml'
            infrastructure:
              - 'apis/infrastructure/**'
              - 'apis/infrastructure/kafka/**'
              - 'apis/infrastructure/kafka/kafka-config-data/**'
              - 'apis/infrastructure/kafka/kafka-consumer/**'
              - 'apis/infrastructure/kafka/kafka-model/**'
              - 'apis/infrastructure/kafka/kafka-producer/**'
              - 'apis/infrastructure/mqtt/**'
              - 'apis/infrastructure/outbox/**'
              - 'apis/infrastructure/saga/**'
              - 'apis/pom.xml'
          # If root pom.xml changes, build everything
          list-files: shell

      - name: Show changed modules
        run: |
          echo "📦 Changed Modules:"
          echo "  order-service: ${{ steps.filter.outputs.order-service }}"
          echo "  common: ${{ steps.filter.outputs.common }}"
          echo "  infrastructure: ${{ steps.filter.outputs.infrastructure }}"
          echo "  has-changes: ${{ steps.filter.outputs.has-changes }}"

  # Step 2: Build and test changed modules
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    # Only run if there are changes detected
    if: needs.detect-changes.outputs.has-changes != '[]' && needs.detect-changes.outputs.has-changes != ''
    # This job needs the detect-changes job to complete first
    needs: detect-changes
    
    # Docker service for tests that need Docker (Testcontainers, etc.)
    services:
      docker:
        image: docker:24-dind
        options: >-
          --privileged
        env:
          DOCKER_TLS_CERTDIR: /certs
      
      # PostgreSQL is managed by Testcontainers for integration tests
      # No need for a separate postgres service - Testcontainers will start its own container
    
    # Set working directory to the APIs folder
    defaults:
      run:
        working-directory: apis
    
    steps:
      # Step 2.1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2.2: Setup Java 21
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Eclipse Temurin (formerly AdoptOpenJDK)
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'  # Cache Maven dependencies for faster builds
      
      # Step 2.3: Setup Maven
      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      
      # Step 2.4: Display versions (Java, Maven, Docker)
      - name: Display versions
        run: |
          echo "🔧 Java Version:"
          java -version
          echo ""
          echo "🔧 Maven Version:"
          mvn -version
          echo ""
          echo "🐳 Docker Version:"
          docker --version || echo "Docker not available"
          docker compose version || echo "Docker Compose not available"
      
      # Step 2.5: Build and test entire project if common module changed
      # Common is a shared dependency, so ALL modules need to be tested
      - name: Build and Test All (Common Changed)
        if: needs.detect-changes.outputs.common == 'true'
        run: |
          echo "📦 Common module changed - building and testing ALL modules..."
          echo "🧪 Testcontainers will automatically start PostgreSQL container for integration tests"
          mvn clean verify
      
      # Step 2.6: Build and test entire project if multiple modules changed
      - name: Build and Test All (Multiple Modules Changed)
        if: |
          needs.detect-changes.outputs.common != 'true' &&
          ((needs.detect-changes.outputs.order-service == 'true' && 
            needs.detect-changes.outputs.infrastructure == 'true'))
        run: |
          echo "📦 Multiple modules changed - building and testing ALL modules..."
          echo "🧪 Testcontainers will automatically start PostgreSQL container for integration tests"
          mvn clean verify
      
      # Step 2.7: Build and test infrastructure module (if only infrastructure changed)
      - name: Build and Test Infrastructure
        if: |
          needs.detect-changes.outputs.common != 'true' &&
          needs.detect-changes.outputs.infrastructure == 'true' &&
          needs.detect-changes.outputs.order-service != 'true'
        run: |
          echo "📦 Building infrastructure module..."
          mvn clean verify -pl infrastructure -am
      
      # Step 2.8: Build and test order-service module (if only order-service changed)
      - name: Build and Test Order Service
        if: |
          needs.detect-changes.outputs.common != 'true' &&
          needs.detect-changes.outputs.order-service == 'true' &&
          needs.detect-changes.outputs.infrastructure != 'true'
        run: |
          echo "📦 Building order-service module..."
          echo "🧪 Running tests (including integration tests with Testcontainers)..."
          echo "   Testcontainers will automatically start PostgreSQL container for integration tests"
          mvn clean verify -pl order-service -am
      
      # Step 2.9: Generate test reports summary
      - name: Test Summary
        if: always() && (success() || failure())  # Run even if tests fail, but only if build ran
        run: |
          # Check if apis directory exists (build ran)
          if [ ! -d "apis" ]; then
            echo "⚠️ Build did not run - skipping test summary"
            exit 0
          fi
          cd apis || exit 0
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count test files found
          TEST_COUNT=$(find . -name "*Test.java" -o -name "*Tests.java" -o -name "*IT.java" | wc -l)
          echo "📝 Test files found: $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display test timing from surefire reports
          echo "### ⏱️ Test Execution Times" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '#### Test Suites Summary' >> $GITHUB_STEP_SUMMARY
          echo '| Test Suite | Total Time | Tests Run | Failures | Errors |' >> $GITHUB_STEP_SUMMARY
          echo '|------------|------------|-----------|----------|--------|' >> $GITHUB_STEP_SUMMARY
          
          for report in $(find . -name "TEST-*.xml" -path "*/target/surefire-reports/*" 2>/dev/null); do
            if [ -f "$report" ]; then
              SUITE_NAME=$(grep -oP 'name="\K[^"]+' "$report" | head -1)
              TOTAL_TIME=$(grep -oP 'time="\K[^"]+' "$report" | head -1)
              TESTS=$(grep -oP 'tests="\K[^"]+' "$report" | head -1)
              FAILURES=$(grep -oP 'failures="\K[^"]+' "$report" | head -1)
              ERRORS=$(grep -oP 'errors="\K[^"]+' "$report" | head -1)
              echo "| $SUITE_NAME | ${TOTAL_TIME}s | $TESTS | $FAILURES | $ERRORS |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Individual Test Timing" >> $GITHUB_STEP_SUMMARY
          echo '| Test Class | Test Method | Time (s) | Status |' >> $GITHUB_STEP_SUMMARY
          echo '|------------|-------------|----------|--------|' >> $GITHUB_STEP_SUMMARY
          
          for report in $(find . -name "TEST-*.xml" -path "*/target/surefire-reports/*" 2>/dev/null); do
            if [ -f "$report" ]; then
              # Extract individual test cases with timing
              grep -oP '<testcase[^>]*>' "$report" | while read -r testcase; do
                TEST_NAME=$(echo "$testcase" | grep -oP 'name="\K[^"]+' | head -1)
                CLASS_NAME=$(echo "$testcase" | grep -oP 'classname="\K[^"]+' | head -1)
                TEST_TIME=$(echo "$testcase" | grep -oP 'time="\K[^"]+' | head -1)
                
                # Determine status
                if echo "$testcase" | grep -q 'failure'; then
                  STATUS="❌ FAILURE"
                elif echo "$testcase" | grep -q 'error'; then
                  STATUS="⚠️ ERROR"
                else
                  STATUS="✅ PASSED"
                fi
                
                # Extract short class name (last part after dot)
                SHORT_CLASS=$(echo "$CLASS_NAME" | sed 's/.*\.//')
                
                echo "| $SHORT_CLASS | $TEST_NAME | ${TEST_TIME:-0}s | $STATUS |" >> $GITHUB_STEP_SUMMARY
              done
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List test reports if they exist
          if [ -d "target/surefire-reports" ] || [ -d "*/target/surefire-reports" ]; then
            echo "✅ Test reports generated" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No test reports found" >> $GITHUB_STEP_SUMMARY
          fi
      
      # Step 2.10: Generate HTML test reports
      - name: Generate HTML Test Reports
        if: always() && success() || failure()
        run: |
          # Check if apis directory exists (build ran)
          if [ ! -d "apis" ]; then
            echo "⚠️ Build did not run - skipping report generation"
            exit 0
          fi
          cd apis || exit 0
          echo "📊 Generating HTML test reports..."
          mvn surefire-report:report-only -q || echo "Some reports may have failed to generate"
      
      # Step 2.11: Upload test results and reports (includes HTML reports)
      - name: Upload test results and reports
        if: always()  # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results-and-reports
          path: |
            apis/**/target/surefire-reports/**
            apis/**/target/site/jacoco/**
            apis/**/target/site/surefire-report.html
          retention-days: 30  # Keep for 30 days
          if-no-files-found: ignore
      
      # Step 2.12: Generate and display report links
      - name: Generate Report Links
        if: always() && success() || failure()
        run: |
          # Check if apis directory exists (build ran)
          if [ ! -d "apis" ]; then
            echo "⚠️ Build did not run - skipping report links"
            exit 0
          fi
          cd apis || exit 0
          echo "## 📋 Test & Coverage Reports (HTML)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 How to View Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the **Artifacts** section at the bottom of this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Download the \`test-results-and-reports\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "3. Extract the ZIP file" >> $GITHUB_STEP_SUMMARY
          echo "4. Open the HTML reports in your browser:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📊 Available HTML Reports:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List Surefire HTML reports (test results with timing)
          SUREFIRE_HTML_COUNT=0
          for report in $(find . -path "*/target/site/surefire-report.html" 2>/dev/null); do
            SUREFIRE_HTML_COUNT=$((SUREFIRE_HTML_COUNT + 1))
            MODULE=$(echo "$report" | sed 's|.*/apis/\([^/]*\)/.*|\1|')
            echo "- **Test Results**: \`$report\` - Shows test execution times and results" >> $GITHUB_STEP_SUMMARY
          done
          
          if [ $SUREFIRE_HTML_COUNT -eq 0 ]; then
            echo "- ⚠️ No Surefire HTML reports found (XML reports available in \`target/surefire-reports/\`)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List JaCoCo HTML reports (code coverage)
          JACOCO_COUNT=0
          for report in $(find . -path "*/target/site/jacoco/index.html" 2>/dev/null); do
            JACOCO_COUNT=$((JACOCO_COUNT + 1))
            MODULE=$(echo "$report" | sed 's|.*/apis/\([^/]*\)/.*|\1|')
            echo "- **Code Coverage**: \`$report\` - Shows code coverage metrics (lines, branches, instructions)" >> $GITHUB_STEP_SUMMARY
          done
          
          if [ $JACOCO_COUNT -eq 0 ]; then
            echo "- ⚠️ No JaCoCo HTML reports found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Test HTML Reports: $SUREFIRE_HTML_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage HTML Reports: $JACOCO_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Count XML/TXT reports
          XML_COUNT=$(find . -name "TEST-*.xml" -path "*/target/surefire-reports/*" 2>/dev/null | wc -l)
          TXT_COUNT=$(find . -name "*.txt" -path "*/target/surefire-reports/*" 2>/dev/null | wc -l)
          
          echo "- XML Test Reports: $XML_COUNT files" >> $GITHUB_STEP_SUMMARY
          echo "- Text Test Reports: $TXT_COUNT files" >> $GITHUB_STEP_SUMMARY

